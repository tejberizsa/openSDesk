// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using openSDesk.API.Data;

namespace openSDesk.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191220212119_Initial_Create")]
    partial class Initial_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("openSDesk.API.Models.Attachement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Filename");

                    b.Property<int?>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Attachements");
                });

            modelBuilder.Entity("openSDesk.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("openSDesk.API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateRead");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("MessageSent");

                    b.Property<bool>("RecipientDeleted");

                    b.Property<int>("RecipientId");

                    b.Property<bool>("SenderDeleted");

                    b.Property<int>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("openSDesk.API.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("NotificationSentAt");

                    b.Property<int>("OwnerId");

                    b.Property<string>("WorkNote");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("openSDesk.API.Models.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Note");

                    b.Property<DateTime?>("NotificationSentAt");

                    b.Property<int>("OwnerId");

                    b.Property<bool>("Refused");

                    b.Property<int?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("openSDesk.API.Models.ResolutionCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("ResolutionCodes");
                });

            modelBuilder.Entity("openSDesk.API.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("openSDesk.API.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("openSDesk.API.Models.SubStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StatusId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("SubStatuses");
                });

            modelBuilder.Entity("openSDesk.API.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("NotificationSentAt");

                    b.Property<int>("ResponseId");

                    b.Property<int?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("TicketId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("openSDesk.API.Models.SurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Refusal");

                    b.Property<string>("Text");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("SurvayResponses");
                });

            modelBuilder.Entity("openSDesk.API.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedToId");

                    b.Property<int>("AssignmentGroupId");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("ClosedAt");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("InvoicedAt");

                    b.Property<string>("Location");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<DateTime?>("NotificationSentAt");

                    b.Property<int>("Priority");

                    b.Property<int>("RequesterId");

                    b.Property<DateTime?>("ResolvedAt");

                    b.Property<int>("SourceId");

                    b.Property<int>("StatusId");

                    b.Property<string>("Summary");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("AssignmentGroupId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("openSDesk.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmKey");

                    b.Property<DateTime?>("ConfirmationEmailSent");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EMail");

                    b.Property<bool>("EMailConfirmed");

                    b.Property<string>("Introduction");

                    b.Property<DateTime>("LastActive");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("openSDesk.API.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("openSDesk.API.Models.UserGroupAssingment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("UserGroupId");

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserGroupAssingments");
                });

            modelBuilder.Entity("openSDesk.API.Models.UserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<bool>("IsMain");

                    b.Property<string>("Url");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("openSDesk.API.Models.Attachement", b =>
                {
                    b.HasOne("openSDesk.API.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("openSDesk.API.Models.Message", b =>
                {
                    b.HasOne("openSDesk.API.Models.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("openSDesk.API.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("openSDesk.API.Models.Note", b =>
                {
                    b.HasOne("openSDesk.API.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("openSDesk.API.Models.Resolution", b =>
                {
                    b.HasOne("openSDesk.API.Models.ResolutionCode", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("openSDesk.API.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("openSDesk.API.Models.Ticket")
                        .WithMany("Resolutions")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("openSDesk.API.Models.SubStatus", b =>
                {
                    b.HasOne("openSDesk.API.Models.Status")
                        .WithMany("SubStatuses")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("openSDesk.API.Models.Survey", b =>
                {
                    b.HasOne("openSDesk.API.Models.SurveyResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("openSDesk.API.Models.Ticket")
                        .WithMany("Surveys")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("openSDesk.API.Models.Ticket", b =>
                {
                    b.HasOne("openSDesk.API.Models.User", "AssignedTo")
                        .WithMany("TicketsAssigned")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("openSDesk.API.Models.UserGroup", "AssignmentGroup")
                        .WithMany("TicketsAssigned")
                        .HasForeignKey("AssignmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("openSDesk.API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("openSDesk.API.Models.User", "Requester")
                        .WithMany("TicketsCreated")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("openSDesk.API.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("openSDesk.API.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("openSDesk.API.Models.UserGroupAssingment", b =>
                {
                    b.HasOne("openSDesk.API.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("openSDesk.API.Models.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("openSDesk.API.Models.UserPhoto", b =>
                {
                    b.HasOne("openSDesk.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
